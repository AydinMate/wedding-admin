generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String        @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  billboards Billboard[]   @relation("StoreToBillboard")
  categories Category[]    @relation("StoreToCategory")
  colours    Colour[]      @relation("StoreToColour")
  sizes      Size[]        @relation("StoreToSize")
  products   Product[]     @relation("StoreToProduct")
  orders     Order[]       @relation("StoreToOrder")
  hires      ProductHire[] @relation("StoreToHire")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Colour {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColour", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Product {
  id           String        @id @default(uuid())
  storeId      String
  store        Store         @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId   String
  category     Category      @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name         String
  price        Decimal
  isFeatured   Boolean       @default(false)
  isArchived   Boolean       @default(false)
  sizeId       String
  size         Size          @relation(fields: [sizeId], references: [id])
  colourId     String
  colour       Colour        @relation(fields: [colourId], references: [id])
  images       Image[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orderItems   OrderItem[]
  productHires ProductHire[]
  quantity     Int           @default(1) // Quantity of the product

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colourId])
}

model ProductHire {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  storeId   String
  store     Store    @relation("StoreToHire", fields: [storeId], references: [id])
  hireDate  DateTime
  isPaid    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([storeId])
  @@index([orderId])
}

model Order {
  id             String        @id @default(uuid())
  storeId        String
  store          Store         @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems     OrderItem[]
  isPaid         Boolean       @default(false)
  phone          String        @default("")
  address        String        @default("")
  hireDate       DateTime
  dropoffAddress String        @default("")
  isDelivery     Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  productHires   ProductHire[]

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
